<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of oxcarxierra</title>
  
  <subtitle>oxcarxierra</subtitle>
  <link href="https://oxcarxierra.github.io/feed.xml" rel="self"/>
  
  <link href="https://oxcarxierra.github.io/"/>
  <updated>2023-05-04T13:49:36.000Z</updated>
  <id>https://oxcarxierra.github.io/</id>
  
  <author>
    <name>oxcarxierra | 오승석</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023년 4월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2023/april-2023-review/"/>
    <id>https://oxcarxierra.github.io/Review/2023/april-2023-review/</id>
    <published>2023-05-04T13:49:36.000Z</published>
    <updated>2023-05-04T13:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><ul><li><p>Nomad Coders 니꼬썜의 &lt;Flutter로 웹툰 앱 만들기&gt;를 모두 수강했다. 최근에 네이티브 앱 개발을 하면서 디버깅을 할 때 양 쪽 플랫폼을 모두 신경써야 하는 문제들 때문에 질릴만큼 질려버렸는데, Flutter은 그런 부분이 덜할 뿐더러 확실히 개발자에게 친화적이도록 만들어졌다는 느낌을 받을 수 있었다. 다음 사이드 프로젝트를 진행하게 되면 프론트엔드 라이브러리로 꼭 사용해볼 생각이다.</p></li><li><p>D-111 계획으로 세웠던 목표들 중에서는 어쩌면 운동하기를 가장 잘 실천하고 있는 것 같다. 4월 한 달간 헬스장에 24일이나 출근했고 2주마다 재보고 있는 인바디 결과로도 이제 어느정도 상승곡선이 보이기 시작했다. 그러면서 동시에 체지방률 증가 없이 골격근량 38kg이라는 목표가 얼마나 터무니없는 숫자인지도 깨달아버렸다. 할 수 있는 만큼 해보자는 생각이다.</p></li></ul><!-- - 4월 초에 본격적으로 <HYPE - 달콤한 칭찬을 나눠봐요!>앱을 출시하고 서비스를 시작하면서 우여곡절과 시행착오를 겪을 수 있었다. 경쟁 앱의 출시로 -->]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nomad Coders 니꼬썜의 &amp;lt;Flutter로 웹툰 앱 만들기&amp;gt;를 모두 수강했다. 최근에 네이티브 앱 개발을 하면서 디버깅을 할 때 양 쪽 플랫폼을 모두 신경써</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[HYPE 앱 개발기] 희망찼던 시작과 아쉬운 지금, 그리고 배운 것들 </title>
    <link href="https://oxcarxierra.github.io/Development/hype-development-review/"/>
    <id>https://oxcarxierra.github.io/Development/hype-development-review/</id>
    <published>2023-04-13T06:04:29.000Z</published>
    <updated>2023-04-13T06:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h1><p>2월 초 SDM형에게서 “앱 하나 빠르게 만들어볼 생각 있냐”며 연락이 왔다. 미국의 <strong>GAS</strong>, 독일의 <strong>SLAY</strong> 앱을 벤치마킹하여 학생들을 위한 “칭찬 앱”을 만들어보자는 제안이었다. 다양한 질문에 대해 유저들이 답변하면 자연스럽게 유저 간 칭찬이 이루어지고, BM은 칭찬을 보낸 사람을 확인하려면 광고를 보거나 프리미엄 구독에서 나오는 서비스였다.</p><h1 id="기대"><a href="#기대" class="headerlink" title="기대"></a>기대</h1><p><strong>SLAY</strong>는 출시 4일만에 독일 앱스토어 1위를 하고 250만 유로 규모의 투자를 유치했으며, <strong>GAS</strong>의 경우는 700만 달러의 수입을 내며 디스코드가 인수하기로 했다는 <a href="https://startuprecipe.co.kr/archives/5687391">뉴스</a>를 봤다. 이렇게 대박을 냈던 아이템이 아직 한국에는 없었다. 앱스토어와 플레이스토어 어디를 뒤져보아도 없었다. 우리가 국내 시장에서만큼은 선두주자처럼 느껴졌다.</p><p>지인들에게 개발 중간중간에 앱을 소개할 때, 술게임중 하나인 ‘거짓말 게임’이 좋은 예시가 되었다. 답을 듣고 질문이 궁금하면 선뜻 술을 마시고자 하는 의지가 생기듯이, 칭찬을 받고 사람이 궁금하면 진짜로 유저들이 선뜻 광고를 볼 것 같았다. 외국 학생들 뿐더러 우리나라 대학생 사이에도 먹히는데, MZ 중고등학생들에게 먹히지 않을 이유가 있겠는가? 하면서 말이다.</p><h1 id="기획과-개발과정"><a href="#기획과-개발과정" class="headerlink" title="기획과 개발과정"></a>기획과 개발과정</h1><p>SDM형이 백엔드(+프론트 지원)를, 내가 프론트엔드를 맡았고 옛날 동아리에서 한 번 만난 적 있었던 SWJ형이 기획을 맡아, 세 명으로 팀이 구성됐다. 디자이너가 있었다면 더 좋았겠지만, 프론트를 맡는 김에 내가 그냥 디자인도 해보기로 했다.</p><p>앱 프레임워크는 언제나 그랬듯 <code>React Native</code>를, 백엔드 프레임워크는 <code>Nest.js</code>를 사용해봤다. 지난 프로젝트들로 배웠던 부분을 최대한 활용해보기 위해 <code>React-Query</code>활용을 극대화하고 상태관리를 최소화하며, 꼭 필요할 때만 <code>Recoil</code>을 사용해보기로 했다.</p><p>앱 이름은 <strong>HYPE</strong>으로 정했다. MZ를 타겟으로 하는 만큼 힙하고 입에 잘 붙는 이름을 찾다가 만장일치로 뜻이 모였다. 자연스럽게 우리 팀 이름은 <strong>Hypeboyz</strong>가 되었다. <del>뉴진스의 하입보이요</del></p><p>하루이틀, 길면 일주일로 끝날 줄 알았던 개발은 군대로 인한 시간 부족과 개인 역량의 부족으로 한 달 남짓이 걸렸다. 결국 2월 중순에 시작해서 3월 중순에 개발이 완료되었지만, 갖가지 버그와 오류로 인해 (<a href="http://oxcarxierra.github.io/Development/rn-firebase-phone-auth/">특히 이 이슈</a>) 4월 초에야 본격적인 서비스 개시가 가능하게 되었다.</p><p>비록 일정의 지연이 조금은 있었지만, 큰 문제 없이 순조롭게 진행되는 중이라고 생각했었고 마케팅과 유통 준비도 꽤나 구체적으로 계획하고 있었다.</p><h1 id="경쟁-앱의-등장-🤯과-Plan-B"><a href="#경쟁-앱의-등장-🤯과-Plan-B" class="headerlink" title="경쟁 앱의 등장 🤯과 Plan B"></a>경쟁 앱의 등장 🤯과 Plan B</h1><p>배포를 앞두고 막바지 QA를 진행하고 있었던 <strong>3월 26일</strong>, 지인을 통해서 우리와 같은 컨셉의 앱이 서비스를 시작했다는 소식을 들었다. 직접 설치해서 빠르게 훑어보니 HYPE보다 UI도 더 깔끔할 뿐더러 카카오 로그인을 이용한 간편한 유저 유입이 가능했다. 사이드프로젝트 정도로 진행하던 우리보다 더 본격적으로 준비해왔다는걸 단번에 느낄 수 있었고, 우리가 선발주자라는 굳은 믿음과 함께 내 멘탈은 조각나버렸다.</p><p>복구하는데 SDM형과 SWJ형의 긍정적인 마인드가 큰 도움이 되었다.</p><blockquote><p>“어차피 우리가 선두였어도, 후발주자는 필연적으로 따라왔을 것이다.”<br>“우리 앱만의 아이덴티티를 찾을 수 있는 좋은 기회다.”<br>“중요한 건 꺾이지 않는 마음, 우리는 우리 할 일을 하자!”</p></blockquote><h1 id="HYPE의-현위치와-이정표"><a href="#HYPE의-현위치와-이정표" class="headerlink" title="HYPE의 현위치와 이정표"></a>HYPE의 현위치와 이정표</h1><p>4월 10일 현재 경인고등학교 학생들을 대상으로 한 인스타그램 마케팅으로 약 40명의 유저를 확보했으나, 이들이 얼마나 앱을 사용하는지는 미지수다. 지긋지긋했던 안드로이드 전화번호 인증 문제를 해결했으니 안드로이드 유저를 대상으로 2차 넛지를 주며 재시도를 해보고, 지표들을 확인할 차례다.<br>우선 총 유저수를 확보하는게 우선이고, 이후 유저간의 상호작용을 유발하거나 개인 질문같은 컨텐츠로 리텐션을 잡고 DAU를 확보해야 한다. J커브를 그려주어 다른 학교로도 확장해 나간다면 베스트지만, 그렇지 않을 가능성이 높다고 본다.</p><p>심지어 시장에 먼저 진출한 유사 서비스가 있다보니 경쟁에서 밀린다면 더 어려워질 것이다. S***앱의 리드가 <a href="https://disquiet.io/@khj03020302/makerlog/7844">디스콰이엇에 올린 글</a>을 보았는데, 고등학교 3학년인데도 불구하고 이 정도의 기획력과 생각을 가지고 있다는 것 자체에 리스펙을 느끼지 않을 수 없었다. 이미 다양한 학교의 많은 유저들을 확보했고, 그것이 가장 큰 무기가 되어 빠르게 디벨롭해나갈 역량이 충분하다고 느꼈다.</p><p>하지만 선발주자던 후발주자던 상관 없이, 경쟁력을 갖추는 것은 당연하게도 할 일이다. 우리가 다른 앱에 비해 어떤 장점을 가질 수 있으며, 어떻게 구현해낼 수 있는지를 계속 생각해야 할 것 같다. 그렇게 모든 노력을 쏟아붇고도 장렬히 패배한다면 그제서야 좋은 실패를 겪었다고 다잡을 줄도 알아야겠다.</p><h1 id="아쉬웠던-것들-그리고-배운-것들"><a href="#아쉬웠던-것들-그리고-배운-것들" class="headerlink" title="아쉬웠던 것들, 그리고 배운 것들"></a>아쉬웠던 것들, 그리고 배운 것들</h1><h2 id="1-쌓이는-디자인-부채"><a href="#1-쌓이는-디자인-부채" class="headerlink" title="1. 쌓이는 디자인 부채"></a>1. 쌓이는 디자인 부채</h2><p>프론트엔드 개발과 디자인을 동시에 진행하기엔 내가 UI 디자인에 대한 감각이 아직 부족하다. 그렇기에 초반에 앱 브랜드 컬러나 컨셉을 명확히 잡고 갔어야 했는데, Lean하고 빠른 개발을 추구하는 동안 해결하지 못한 디자인 부채가 생겼다. 유저들이 사용하기에는 불편하지 않을지 몰라도, 경쟁성을 확보하는 큰 요소들 중 하나가 UI기에 지금도 스스로 만족하지 못한 채 쌓여만 가고 있다.</p><h2 id="2-개발-속도와-Lean함의-중요성"><a href="#2-개발-속도와-Lean함의-중요성" class="headerlink" title="2. 개발 속도와 Lean함의 중요성"></a>2. 개발 속도와 Lean함의 중요성</h2><p>항상 느끼지만 Lean한 기획은 ‘대충’짠 계획이 아니다. 오히려 반대로, 어떤 부분을 Lean하게 파고들어 구현할 지 <strong>구체적인</strong> 기획이 이루어져야 한다. 개발을 하다가 **어, 이 부분을 추가하면 더 좋을 것 같은데?**하는 생각에 시간을 더 투자하며 이것 저것 살을 붙이다 보면 결국 처음의 Lean함은 없어지고 만다.<br>그리고 React Native 프레임워크의 앱을 거의 세,네번째 만들어보는 것 치고 아직도 초기 설정과 자잘한 디버깅에 너무 많은 시간을 쏟는 것 같다. 결국엔 이런 경험이 쌓이면 해결되겠지만, 더 꼼꼼하고 빠른 코더가 되고싶다.</p><h2 id="3-베타테스팅의-필요성"><a href="#3-베타테스팅의-필요성" class="headerlink" title="3. 베타테스팅의 필요성"></a>3. 베타테스팅의 필요성</h2><p>경쟁 앱의 등장으로 시간에 쫓기듯이 출시하는 바람에 베타테스팅을 진행하지 못했다. 결국 앱을 완벽한 상태로 만들고 출시하려면 다수의 검토가 생략되어서는 안된다.</p><hr><p>개발 후기 2편은 현재 진행중인 마케팅&#x2F;유통 과정을 마무리한 이후에 이에 대한 피드백을 해볼 생각이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&quot;시작&quot;&gt;&lt;a href=&quot;#시작&quot; class=&quot;headerlink&quot; title=&quot;시작&quot;&gt;&lt;/a&gt;시작&lt;/h1&gt;&lt;p&gt;2월 초 SDM형에게서 “앱 하나 빠르게 만들어볼 생각 있냐”며 연락</summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>[React Native] Firebase 전화번호 인증 기능 추가하기 (Feat. 안드로이드 자동 인증)</title>
    <link href="https://oxcarxierra.github.io/Development/rn-firebase-phone-auth/"/>
    <id>https://oxcarxierra.github.io/Development/rn-firebase-phone-auth/</id>
    <published>2023-04-07T16:57:43.000Z</published>
    <updated>2023-04-07T16:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>HYPE 앱은 전화번호 기반으로 유저 로그인, 회원가입이 이루어지기 때문에 전화번호 인증이 필수적이었다. 그래서 Google Firebase에서 제공하는 문자메세지 인증 서비스를 처음으로 사용해보게 되었다.</p><h1 id="Google-Firebase-연동하기"><a href="#Google-Firebase-연동하기" class="headerlink" title="Google Firebase 연동하기"></a>Google Firebase 연동하기</h1><p>먼저 개발하려는 앱과 프로젝트를 연동해주어야 한다. <code>React Native</code> 프로젝트에 쉽게 프로젝트를 연동할 수 있는 <code>react-native-firebase</code> 라이브러리를 사용하면 편하다.<br>연동하는 일련의 방법은 공식문서 및 블로그를 참고했다. Firebase 공식문서는 Swift와 Kotlin 기반으로 설명이 되어있어서, <a href="https://velog.io/@ddowoo/react-native-firebase-%EC%97%B0%EB%8F%99">타 블로그</a>가 도움이 많이 되었다.</p><p>Firebase에서는 여러 가지 방법의 Authentication(인증)수단을 제공하는데, 그 중 전화(phone)을 이용하면 유저가 입력한 번호로 인증번호를 전송할 수 있다. 그리고 유저가 입력한 인증번호와 대조하면 핸드폰 번호 인증이 가능해진다.</p><h1 id="인증번호-전송-및-대조-검증-코드"><a href="#인증번호-전송-및-대조-검증-코드" class="headerlink" title="인증번호 전송 및 대조 검증 코드"></a>인증번호 전송 및 대조 검증 코드</h1><p>대부분의 로직은 <code>React Native Firebase</code>에서 제공하는 <code>Phone Authentication</code> 공식문서를 참고하면 된다.<br>전화번호 인증의 전체적인 로직은 이렇다.</p><ol><li>전화번호를 매개변수로 <code>signInWithPhoneNumber()</code>함수를 호출하고, 반환된 값을 state로 저장한다.</li><li>그러면 firebase에서 해당 전화번호로 OTP(One Time Passcode)가 전송된다.</li><li>유저에게서 OTP를 입력받고, 이를 state에 저장된 변수 내 <code>confirm()</code>함수의 매개변수로 넣는다.</li><li>인증번호가 맞다면 문제가 없지만, 인증번호가 틀리거나 만료된다면 <code>Error</code>가 반환한다.</li></ol><p>전체 코드는 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SignInComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [phone, setPhone] = useState&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [verificationCode, setVerificationCode] = useState&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [confirm, setConfirm] =</span><br><span class="line">    useState&lt;<span class="title class_">FirebaseAuthTypes</span>.<span class="property">ConfirmationResult</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [authenticated, setAuthenticated] = useState&lt;boolean&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">requestSignInWithPhoneNumber</span> = <span class="keyword">async</span> (<span class="params">phone: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 입력받은 전화번호에 국가코드 추가</span></span><br><span class="line">      <span class="keyword">const</span> confirmation = <span class="keyword">await</span> <span class="title function_">auth</span>().<span class="title function_">signInWithPhoneNumber</span>(<span class="string">`+82 <span class="subst">$&#123;phone&#125;</span>`</span>);</span><br><span class="line">      <span class="title function_">setConfirm</span>(confirmation);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title class_">Alert</span>.<span class="title function_">alert</span>(</span><br><span class="line">        <span class="string">&quot;인증번호를 정상적으로 전송하지 못했어요. 다시 시도해주세요.&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 인증번호 전송 버튼 클릭시 실행 호출</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onPressSendCode</span> = <span class="keyword">async</span> (<span class="params">phone: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 번호가 11자리가 아니거나, 이미 존재하는 번호이면 여기서 예외처리</span></span><br><span class="line">    <span class="keyword">const</span> onSuccessSignInPhoneNumber = <span class="keyword">await</span> <span class="title function_">requestSignInWithPhoneNumber</span>(</span><br><span class="line">      phone</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (onSuccessSignInPhoneNumber) &#123;</span><br><span class="line">      <span class="comment">// 인증번호가 정상적으로 발송되었을 때 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">requestConfirmVerificationCode</span> = <span class="keyword">async</span> (<span class="params">code: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> confirm!!.<span class="title function_">confirm</span>(code);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title class_">Alert</span>.<span class="title function_">alert</span>(<span class="string">&quot;인증번호가 일치하지 않아요. 다시 시도해주세요.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">confirmCode</span> = <span class="keyword">async</span> (<span class="params">code: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">requestConfirmVerificationCode</span>(code);</span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">      <span class="title function_">setAuthenticated</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 폰인증 백그라운드 자동 인증 리스너 추가 for 안드로이드</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subscriber = <span class="title function_">auth</span>().<span class="title function_">onAuthStateChanged</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="title function_">setAuthenticated</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> subscriber; <span class="comment">// 성공시 listener 제거</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 렌더링될 부분</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h1 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h1><h2 id="⚠️-Google-Playstore-등록-이후-실기기에서-인증번호-발송-실패-이슈"><a href="#⚠️-Google-Playstore-등록-이후-실기기에서-인증번호-발송-실패-이슈" class="headerlink" title="⚠️ Google Playstore 등록 이후 실기기에서 인증번호 발송 실패 이슈"></a>⚠️ Google Playstore 등록 이후 실기기에서 인증번호 발송 실패 이슈</h2><p>안드로이드 시뮬레이터에서는 정상적으로 동작하던 인증이 Playstore을 통해서 배포된 앱에서는 <code>Error: [auth/invalid-app-credential] Invalid token</code>에러가 발생한다면, Playstore 앱 서명 <code>SHA-1</code>과 <code>SHA-256</code> 키를 Firebase에 등록했는지 다시 확인해보는 것이 좋다.</p><p>앱을 Firebase에 처음으로 연동할 때, <code>SHA-1</code> 키를 입력하고 google-service.json을 다운로드하는 과정을 거친다. 이때 들어가는 <code>SHA-1</code> 키는 디버그용 키이기 때문에, 릴리즈용 키와 Playstore 앱 서명 키까지 추가로 다시 등록해주어야 한다.</p><p>릴리즈용 <code>SHA-1</code>, <code>SHA-256</code> Key는 터미널에서 아래 커맨드를 입력하여 얻을 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore &quot;C:\work\prj1\prj1.jks&quot;</span><br></pre></td></tr></table></figure><p>Playstore 앱 서명 키는 <code>Play Console - 설정(좌측 메뉴) - 앱 무결성 - 앱 서명</code> 에서 확인할 수 있다. 업로드 키가 아닌 <strong>앱 서명 키</strong>를 이용해야 한다!</p><p>이후 <code>Firebase Console - 앱 설정 - Android 앱 - SHA 인증서 지문</code> 에서 <strong>디지털 지문 추가</strong>를 클릭해 위에서 얻은 키를 입력해주고, 다시 google-service.json을 앱 폴더 내에 위치시키면 끝!</p><h2 id="⚠️-Android-기기에서-인증번호-자동-인증으로-인한-인증번호-만료-이슈"><a href="#⚠️-Android-기기에서-인증번호-자동-인증으로-인한-인증번호-만료-이슈" class="headerlink" title="⚠️ Android 기기에서 인증번호 자동 인증으로 인한 인증번호 만료 이슈"></a>⚠️ Android 기기에서 인증번호 자동 인증으로 인한 인증번호 만료 이슈</h2><p>모든 설정을 마쳤는데도, Android 실기기에서만 인증번호를 확인하는 <code>confirm</code>함수에서 계속 오류를 반환했다. 오류를 재현하는 것 부터 까다로웠는데,</p><ul><li>iOS 기기는 전혀 문제가 없음</li><li>Android Simulator에서 테스트 전화번호로 하면 문제가 없음.</li><li>Android Simulator에서 실기기 전화번호로 인증번호를 받으면 문제가 없음.</li><li>Android 실기기에서 테스트 전화번호로 하면 문제가 없음.</li><li><strong>Android 실기기에서 실기기 전화번호로 인증번호를 받아 입력하면 오류가 발생</strong></li></ul><p>이유는 <strong>안드로이드 일부 기기에서 문자로 보내진 인증번호를 이용해 자동으로 인증을 진행하기 때문</strong>이었다. 그래서 <code>confirm</code>함수는 이미 실행되고 인증까지 된 상태에서 유저가 똑같은 OTP를 이용해 수동으로 한 번 더 인증을 하니 <code>auth/session-expired</code> 오류가 떴던 것이다.</p><p>공식문서의 설명은 아래와 같다.</p><blockquote><p>Some Android devices can automatically process the verification code (OTP) message, and the user would NOT need to enter the code.<br>Actually, if he&#x2F;she tries to enter it, he&#x2F;she will get an error message because the code was already used in the background.<br>In this function, make sure you hide the component(s) for entering the code and&#x2F;or navigate away from this screen.<br>It is also recommended to display a message to the user informing him&#x2F;her that he&#x2F;she has successfully logged in.</p></blockquote><p>그래서 인증화면에서는 아래처럼 <code>onAuthStateChanged</code> 리스너를 둬서 로그인(또는 회원가입)이 되어 user객체가 생긴 걸 감지하도록 해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscriber = <span class="title function_">auth</span>().<span class="title function_">onAuthStateChanged</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="title function_">setAuthenticated</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> subscriber; <span class="comment">// 성공시 listener 제거</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>이 오류를 발견하고 고치는데에 일주일정도 삽질을 했던 것 같다… 이렇게 오랜 시간이 소요됐던 건 네 가지 병크가 겹쳤기 때문이라고 본다.</p><ol><li>일단 공식문서의 초록 주석을 제대로 안읽었음. 몇몇 기기에서는 자동인증이 진행될 수 있다는 내용을 몰랐음.</li><li>실기기에서는 console창에 에러메세지가 뜨지 않아서 OTP expire 오류인지 알아내는데 며칠이 걸렸음.</li><li>안드로이드 실기기가 없어서 애초에 디버깅을 지인 핸드폰으로 했기에 시간제한이 있었음.</li><li>디버깅하려면 <strong>수정 -&gt; 새로 빌드(및 버전 업) -&gt; 실기기에서 앱 업데이트 -&gt; 확인</strong>의 과정을 매번 거쳐야 해서 속도가 느렸음.</li></ol><p>안드로이드 자동인증 만든넘… 밤길 조심하세요 진짜</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Google Firebase를 이용하여 React Native 프로젝트에 전화번호 인증 기능을 추가해보자.&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>[React Native] 앱 추적 권한 요청하기 + App Store Connect 추적 권한 제거 버그</title>
    <link href="https://oxcarxierra.github.io/Development/hype-troubleshooting-ios-permission-request/"/>
    <id>https://oxcarxierra.github.io/Development/hype-troubleshooting-ios-permission-request/</id>
    <published>2023-04-07T15:40:38.000Z</published>
    <updated>2023-04-07T15:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="React-Native-앱-내에서-앱-추적-권한-요청하기"><a href="#React-Native-앱-내에서-앱-추적-권한-요청하기" class="headerlink" title="React Native 앱 내에서 앱 추적 권한 요청하기"></a>React Native 앱 내에서 앱 추적 권한 요청하기</h1><p>앱에서 추적 허용 권한을 얻으러면, <code>ios/Appname/Info.plist</code> 파일 내에 아래의 코드를 넣어야 한다.</p><figure class="highlight plaintext"><figcaption><span>Info.plist</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSUserTrackingUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;예시 문구 : 유저에게 최적화된 광고를 제공하기 위해 광고 활동 정보를 수집하고 있어요.&lt;/string&gt;</span><br></pre></td></tr></table></figure><p>이후 빌드된 파일을 App Store Connect에 업로드하면, 아래와 같이 앱이 수집하는 개인정보 탭에서 <strong>광고 데이터</strong>에 체크가 되어있는걸 볼 수 있다.<br><br></p><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/hoyx4jT.png" alt=""></div><p>이후 앱을 실행했을 때 추적 허용 여부를 묻는 모달을 띄워야 하는데, 이 떄 <code>react-native-permissions</code> 라이브러리가 필요하다.</p><p>이후 구체적인 과정은 <a href="https://juzero-space.tistory.com/312">이 블로그</a>를 참고하며 많은 도움을 받았다.</p><h1 id="앱-추적-투명성-App-Tracking-Transparency-제거-시도시-App-Store-Connect에-반영이-되지-않는-버그"><a href="#앱-추적-투명성-App-Tracking-Transparency-제거-시도시-App-Store-Connect에-반영이-되지-않는-버그" class="headerlink" title="앱 추적 투명성(App Tracking Transparency) 제거 시도시 App Store Connect에 반영이 되지 않는 버그"></a>앱 추적 투명성(App Tracking Transparency) 제거 시도시 App Store Connect에 반영이 되지 않는 버그</h1><p>이 버그는 HYPE 개발중에 나를 빡치게 만든 이슈 중 당당히 Top 3 안에 들었다.</p><p>앱 추적 권한 요청 모달이 잘 해결되지 않아 아예 앱 추적 투명성을 지워보려고 시도했었다. <code>Info.plist</code>에서 <code>NSUserTrackingUsageDescription</code> 키와 string을 삭제하고 다시 빌드한 후 App Store Connect에 업로드해서 권한을 요청 여부를 변경하려 하는데..</p><br><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/fEmnLBg.png" alt=""></div><p>이 문구가 사라지지 않으면서 <strong>게시</strong> 버튼이 눌리지도 않는다. 일단 <code>Info.plist</code>에서 해당 권한을 지웠으니 괜찮을 것으로 예상하면서 심사에 제출하였으나, 어림도 없지! 바로 Reject당해버렸다.</p><p>좀 더 구글링해보니 해당 버그는 Apple Developer Forum에도 등록된 악명 높은 버그였다.</p><blockquote><p><a href="https://developer.apple.com/forums/thread/679585">해당 페이지</a></p></blockquote><p>앱 심사위원(?)이 직접 남긴 댓글과 그에 대한 답글을 보자.</p><br><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/f7xSe5a.png" alt=""></div><p>새로운 버전을 만들고 앱이 수집하는 개인정보를 수정하라고 하는데, 이게 사실상 불가능한 것이 리뷰 팀은 App Store Connect의 개인정보 설정을 기준으로 심사를 해서 <code>Info.plist</code>에 해당 키가 없다고 심사를 거부하며, App Store Connect 페이지에서는 <code>Info.plist</code>를 변경을 해도 개인정보 설정이 바뀌지 않기 때문이다.</p><br><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/pW29LgR.png" alt="분노가 느껴진다.."><span class="caption">분노가 느껴진다..</span></div><p>유일한 해결 방법은 리뷰팀에게 남기는 메모를 통해 개인정보 설정을 변경했다고 어필을 하는 것이라고 한다. 실제로 그렇게 해서 겨우 통과했다는 후기들이 있었다. 나 또한 그렇게 어필을 하려고 시도해보았으나..</p><br><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/He4guBg.png" alt=""></div><p>내가 공들여서 설명을 해줬음에도 불구하고 메모를 전혀 읽지 않은 것 처럼 이전과 정확히 똑같은 리젝 사유만이 돌아올 뿐이었다. 자다 깨서 리젝 사유를 확인하고 역대급으로 애플에 분노한 나는 그만 이런 메모를 보내버리고 말았다.</p><br><div class="figure " style="width:;"><img class="fig-img" src="https://i.imgur.com/COf5hwu.png" alt=""></div><p>결국 나는 다시 앱 추적 권한 요청을 띄우기로 해보고, 며칠간의 디버깅 끝에 결국 성공하고 심사에서 통과할 수 있었다. 혹시나 같은 에러를 겪고 있는 개발자를 위해 이렇게 글을 남겨놓는다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;iOS 앱 내에 App Tracking Transparency permission(앱 추적 권한 허용) 설정하기&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>2023년 3월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2023/march-2023-review/"/>
    <id>https://oxcarxierra.github.io/Review/2023/march-2023-review/</id>
    <published>2023-04-01T05:22:45.000Z</published>
    <updated>2023-04-01T05:22:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><ol><li><p>사이드프로젝트로 시작했던 HYPE 앱을 개발하고 디버깅하는데에 집중했던 한 달이었다. 원래는 4월이 오기 전에 배포까지 완료하고 서비스를 시작하려고 했으나, 경쟁 앱들을 뒤늦게 발견하고 기술적인 문제까지 겹치면서 4월 중으로 미뤄지게 되었다. 자세한 경험과 기록은 본격적인 HYPE 개발기 포스트에 적어보기로 했다.</p></li><li><p>D-111 계획을 세운 이후로 운동은 꾸준히 하는 중이다. 보통 마음을 먹어도 제대로 실천했던 적이 거의 없던 나에게는 이례적인 일이다. 투두메이트 기준 3월 1일부터 31일까지 21번 갔는데, 사실상 주말 빼고는 매일 갔던 셈이다. 눈으로 봐도, 인바디로 측정해봐도 3월 초보다 몸이 많이 좋아졌다. 슬슬 재미가 붙는 중인데 나태해지지 말고 주말에도 아침시간 내서 운동은 꼭 해야겠다. 프로틴 한통을 다 비운 김에 갑자기 삘이 와서 1.25키로를 더 사버렸다. 이번엔 게이너와 함꼐… 득근득근</p></li><li><p>책을 많이 읽지 않았다. 솔직히 출타하고 복귀하면서 지하철 타는 시간에 친목질하고 노노그램하느라 정신이 팔려있었다. 지금 읽고 있는 &lt;소크라테스 익스프레스&gt;가 철학알못인 나에게 흥미가 떨어져서 그런 것 같기도 하다. 취향을 거스르면서까지 독서를 하지는 않는 편…인건가 아무튼 좀 바꿔봐야겠다.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;!-- toc --&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;사이드프로젝트로 시작했던 HYPE 앱을 개발하고 디버깅하는데에 집중했던 한 달이었다. 원래는 4월이 오기 전에 배포까지 완료하고 서비스를 시작하려고 했으나, 경쟁 앱들을 뒤</summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>[React Native] HYPE 개발 중 부딪힌 각종 Issue Troubleshooting</title>
    <link href="https://oxcarxierra.github.io/Development/hype-troubleshooting/"/>
    <id>https://oxcarxierra.github.io/Development/hype-troubleshooting/</id>
    <published>2023-03-25T17:53:42.000Z</published>
    <updated>2023-03-25T17:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="1-iOS-Archive시-ld-symbol-s-not-found-for-architecture-arm64-오류"><a href="#1-iOS-Archive시-ld-symbol-s-not-found-for-architecture-arm64-오류" class="headerlink" title="1. iOS Archive시 ld: symbol(s) not found for architecture arm64 오류"></a>1. iOS Archive시 <code>ld: symbol(s) not found for architecture arm64</code> 오류</h1><p>npx react-native run-ios 빌드는 되는데 archive에서 터지는 경우</p><ul><li><p>pod cache clean –all - 안됨</p></li><li><p>Podfile.lock 삭제 후 pod install - 안됨</p></li><li><p>.xcworkspace 삭제 후 pod install - 안됨</p></li><li><p>pod install –repo-update - 해결!</p></li></ul><h1 id="2-iOS-Simulator-⚠-No-permission-handler-detected"><a href="#2-iOS-Simulator-⚠-No-permission-handler-detected" class="headerlink" title="2. iOS Simulator ⚠ No permission handler detected."></a>2. iOS Simulator ⚠ No permission handler detected.</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">• Check that you link at least one permission handler in your Podfile.</span><br><span class="line">• Uninstall this app, delete your Xcode DerivedData folder and rebuild it.</span><br><span class="line">• If you use use_frameworks!, follow the workaround guide in the project README.</span><br></pre></td></tr></table></figure><p>퍼미션 핸들러가 감지 안되었다는 에러.<br>아마 앞의 에러 땜에 ios 폴더 안에 pod 관련 파일들을 다 날리고 reinstall 해줬기에<br>react-native-permission 라이브러리 사용을 위해 ios에서 설정해주는 게 초기화 돼서 에러 뜨는듯.<br><a href="https://github.com/zoontek/react-native-permissions">https://github.com/zoontek/react-native-permissions</a><br><a href="https://velog.io/@adguy/react-native-ios-%EB%B6%80%EB%B6%84-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%9B%ED%8C%85">https://velog.io/@adguy/react-native-ios-부분-내용-및-트러블-슛팅</a></p><p>이후 xcode에서 빌드폴더 한번 초기화</p><h1 id="3-The-engine-“node”-is-incompatible-with-this-module"><a href="#3-The-engine-“node”-is-incompatible-with-this-module" class="headerlink" title="3. The engine “node” is incompatible with this module."></a>3. The engine “node” is incompatible with this module.</h1><p>먼저 yarn config list 명령을 통해 확인해보자.</p><p>ignore-engine 속성이 없는 것 같다..<br>yarn config set ignore-engines true 로, 엔진 버전과 일치하지 않더라도 커맨드를 진행하게 해버리자.</p><p>그리고 다시 yarn config list 를 통해 확인.</p><p>정상적으로 추가가 되었다.</p><h1 id="4-안드로이드-기기에서-Firebase-자동-문자-인증-이슈"><a href="#4-안드로이드-기기에서-Firebase-자동-문자-인증-이슈" class="headerlink" title="4. 안드로이드 기기에서 Firebase 자동 문자 인증 이슈"></a>4. 안드로이드 기기에서 Firebase 자동 문자 인증 이슈</h1><p>해결하는데만 총 7일이 걸린 최고로 사악한 이슈다. 진짜 노트북 여러번 부셔질 뻔 했다. 아예 하나의 포스트로 남겨두는게 나을 것 같아서, <a href="http://oxcarxierra.github.io/Development/rn-firebase-phone-auth/">여기</a>에서 자세하게 확인할 수 있다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;HYPE 앱 개발하면서 나를 미치게했던 이슈 모음 (Special Thanks to. Stackoverflow)&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
    <category term="React Native" scheme="https://oxcarxierra.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>[React Native] 7전 8기 앱스토어 심사 - Reject 사유 모아보기</title>
    <link href="https://oxcarxierra.github.io/Development/hype-appstore-reject-list/"/>
    <id>https://oxcarxierra.github.io/Development/hype-appstore-reject-list/</id>
    <published>2023-03-25T16:39:17.000Z</published>
    <updated>2023-03-25T16:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h3 id="1-App-Tracking-Transparency-앱-추적-투명성-permission-모달이-안보여요"><a href="#1-App-Tracking-Transparency-앱-추적-투명성-permission-모달이-안보여요" class="headerlink" title="1. App Tracking Transparency(앱 추적 투명성) permission 모달이 안보여요!"></a>1. App Tracking Transparency(앱 추적 투명성) permission 모달이 안보여요!</h3><p>구글 애드몹을 이용하여 넣은 앱 내 광고가 사용자에게 <strong>맞춤형 광고</strong>를 보여주려면 기기의 IDFA(IDentifier for Advertising)애 접근하여아 한다. 안드로이드는 상관없으나, iOS 기기에서는 사용자가 권한을 허가해야만 해당 ID에 접근이 가능하다.</p><p>이 추적 권한 요청은 앱 내에서 단 한번만 가능하고, 사용자가 광고를 시청하기 전에 반드시 요청되어야 한다. React Native 앱 내에 권한 요청을 넣는 방법을과 그 과정에서 겪었던 Troubleshooting은 <a href="http://oxcarxierra.github.io/Development/hype-troubleshooting-ios-permission-request/">이 글</a>을 참고.</p><h4 id="App-Store-Connect에서-사용자-추적-권한-해제가-불가능한-이슈"><a href="#App-Store-Connect에서-사용자-추적-권한-해제가-불가능한-이슈" class="headerlink" title="App Store Connect에서 사용자 추적 권한 해제가 불가능한 이슈"></a>App Store Connect에서 사용자 추적 권한 해제가 불가능한 이슈</h4><h3 id="2-계정-삭제-만드세요"><a href="#2-계정-삭제-만드세요" class="headerlink" title="2. 계정 삭제 만드세요!"></a>2. 계정 삭제 만드세요!</h3><p><code>Does this app have an account deletion feature? If so, where can we find it?</code></p><p>유저 이탈을 최대한 막기 위해서 탈퇴하려면 개발자에게 컨택하라는 모달 하나로 퉁쳤더니,</p><p><code>We noticed that your app supports account creation but does not appear to include an option to initiate account deletion.</code><br><code>Apps that support account creation must also offer account deletion to give App Store users more control of the data they’ve shared while using your app.</code></p><p>다시 똑바로 만들란다.</p><h3 id="3-회원가입시-성별-x2F-연령-왜-수집해요"><a href="#3-회원가입시-성별-x2F-연령-왜-수집해요" class="headerlink" title="3. 회원가입시 성별&#x2F;연령 왜 수집해요?"></a>3. 회원가입시 성별&#x2F;연령 왜 수집해요?</h3><p><code>the following fields or actions are required but do not appear to be directly relevant to your app’s core functionality:</code><br><code>- Age</code><br><code>- Gender</code></p><p>개인정보에 민감한 애플선생. 위 데이터의 수집이 앱의 기능에 필수적임을 친절하게 설명해주자 다시 묻지 않았다.</p><h3 id="4-iPhone-스크린샷으로-iPad-스크린샷-때우지-마세요"><a href="#4-iPhone-스크린샷으로-iPad-스크린샷-때우지-마세요" class="headerlink" title="4. iPhone 스크린샷으로 iPad 스크린샷 때우지 마세요!"></a>4. iPhone 스크린샷으로 iPad 스크린샷 때우지 마세요!</h3><p><code>We noticed that your screenshots do not sufficiently show your app in use. Specifically, your iPad screenshots reflect an iPhone image stretched out to appear to be an iPad image.</code><br><code>To help users understand your app’s functionality and value, your screenshots should highlight your app&#39;s core concept. For example, a gaming app should feature screenshots that capture actual gameplay within the app.</code></p><p>딱걸렸다..</p><p><a href="https://velog.io/@msi753/%EC%95%B1%EC%8A%A4%ED%86%A0%EC%96%B4-%EB%93%B1%EB%A1%9D%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7-%EB%A7%8C%EB%93%A4%EA%B8%B0">https://velog.io/@msi753/앱스토어-등록을-위한-스크린샷-만들기</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;HYPE 앱 App Store 리젝 사유들 모음&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
    <category term="React Native" scheme="https://oxcarxierra.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>전역 전 마지막 111일 - 군 생활 최종 OKR 세우기</title>
    <link href="https://oxcarxierra.github.io/Review/2023/ets-d-111-goal/"/>
    <id>https://oxcarxierra.github.io/Review/2023/ets-d-111-goal/</id>
    <published>2023-03-06T16:09:31.000Z</published>
    <updated>2023-03-06T16:09:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>목표를 세운 3월 7일 기준으로 6월 26일 전역까지 정확히 111일이 남았다. 이대로 나태해지면 안될 것 같아서, 알차게 달려왔던 군생활의 마지막 개인 목표를 세워보기로 했다. (미래의 나를 위한 부연설명을 하자면, 아래는 오로지 나의 노력으로 성취 가능한 개인 목표이며 다른 활동들도 병행할 계획이다)<br>석달 남짓한 시간을 마냥 기다리면 더디 흐르겠지만, 목표를 세우고 보니 촉박해보이기까지 한다. 카투사 복무라는 기회를 마지막까지 200% 살려보자.</p><h3 id="1-자기관리하기"><a href="#1-자기관리하기" class="headerlink" title="1. 자기관리하기"></a>1. 자기관리하기</h3><ul><li>체지방률 15%, 골격근량 38kg 달성하기 (3&#x2F;7 현재 체지방률 15%, 골격근량 32.8kg) - 여름에 나시입고 여행다니자!</li><li>아침에 침대에서 밍기적거리는 습관 고치기</li></ul><h3 id="2-육군창업경진대회-9회-수상하기"><a href="#2-육군창업경진대회-9회-수상하기" class="headerlink" title="2. 육군창업경진대회 9회 수상하기"></a>2. 육군창업경진대회 9회 수상하기</h3><ul><li>본선 진출하기 (4&#x2F;7 접수 마감)</li><li>반드시 우수상 이상 받아보자</li></ul><h3 id="3-책-읽기"><a href="#3-책-읽기" class="headerlink" title="3. 책 읽기"></a>3. 책 읽기</h3><ul><li>5권 이상의 책 읽기</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;목표를 세운 3월 7일 기준으로 6월 26일 전역까지 정확히 111일이 남았다. 이대로 나태해지면 안될 것 같아서, 알차게 달려왔던 군생활의 마지막 개인 목표를 세워보기로 했다. (미래의 나를 위한 부연설명을 하자면, 아래는 오로지 나의 노력으로</summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>2023년 2월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2023/february-2023-review/"/>
    <id>https://oxcarxierra.github.io/Review/2023/february-2023-review/</id>
    <published>2023-02-28T13:33:39.000Z</published>
    <updated>2023-02-28T13:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>번아웃이 씨게 온 한 달이었다. 슬슬 전역이 눈 앞에 보이는가 싶지만 디데이 속 숫자는 아직 세자리다. 사실 이 정도 기간이면 뭐 하나 정도는 더 할 수 있을 것 같아서 이대로 군생활을 끝내기엔 아직 아쉽다. 다만 뭘 할 수 있을지 잘 모르겠다.</p><p>험프리스 버스 노선도가 두 번이나 바뀌면서 USFK Bus App의 대대적인 업데이트를 진행했다. 덕분에 작년에 짜 놓은 코드를 보면서 한숨을 쉬며 리팩토링을 조금 했는데, 확실히 (리액트 한정) 실력이 늘긴 한 것 같았다. 이 참에 서버를 AWS로 옮기는 것도 시도해봤는데, 사실 유저수가 많지도 않고 생각보다 복잡해서 그만두기로 했다.</p><p>사이드프로젝트로 HYPE이라는 앱 개발을 시작했다. 우연한 인연으로 좋은 팀을 꾸려서 간간히 진행했는데, 그동안 시작만 해놓고 끝을 보지 못했던 프로젝트들과는 달리 기대가 된다. 특히 이번에 React-Query를 충분히 이해하고 사용해서 상태관리 라이브러리를 최소한으로 쓰려고 하고 있어서, Recoil이라는 새로운 라이브러리도 연습해보려고 한다.</p><h2 id="읽은-책들"><a href="#읽은-책들" class="headerlink" title="읽은 책들"></a>읽은 책들</h2><ul><li><strong>&lt;인간 실격&gt;</strong>, 다자이 오사무</li><li><strong>&lt;2022 한국이 열광할 세계 트렌드&gt;</strong>, KOTRA (진중문고)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;p&gt;번아웃이 씨게 온 한 달이었다. 슬슬 전역이 눈 앞에 보이는가 싶지만 디데이 속 숫자는 아직 세자리다. 사실 이 정도 기간이면 뭐 하나 정도는 더 할 수 있을 것 같아서 이대로 군생활을 끝내기엔 아직 아쉽다. 다만</summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>2023년 1월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2023/january-2023-review/"/>
    <id>https://oxcarxierra.github.io/Review/2023/january-2023-review/</id>
    <published>2023-02-05T15:23:37.000Z</published>
    <updated>2023-02-05T15:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>2월 회고를 일주일이나 지나서 쓰는… 귀찮음 + 바쁨을 핑계로 대겠다.</p><p>2023년의 첫 한 달은 넘치는 포데이 덕분에 부대에서 일한 시간보다 밖에서 코딩한 시간이 더 많았던 것 같다. 매일 알차게 살긴 했는데, 국방부 시계가 멈춘다는 상말이라 그런건지 단순히 번아웃 때문인지 최근들어 알 수 없는 답답함과 찝찝함이 자꾸 든다.</p><p>ADDIT 팀에서 NextJs 기반의 웹을 제작해서, 배포까지 완료했다. 궁극적으로 만들고자 하는 아이템의 프로토타입으로서 테마를 축구로 Lean하게 좁힌 에디터를 구현해보기로 했다. 오랜만에 NextJs를 써보니 예전에 이해도가 부족한 상태로 사용할 때 보다 그 진가를 좀 알게 된 느낌이다. 그리고 지금까지 쌓인 노하우와 컨벤션을 최대한 적용해보면서, 옛날에 내가 썼던 코드들보다 훨씬 깔끔해진 걸 느낄 수 있었다.</p><p>작년에 앱스토어에 출시했던 USFK Bus 앱을 사실상 손 놓고 방치해두고 있었는데, 어떤 미군이 잘 쓰고 있다면서 셔틀버스 시간표가 바뀌는데 업데이트 좀 해달라는 메일을 보내왔다. 순간 이 시장(?)을 독점할 수 있는 절호의 기회라는 생각에 급하게 데이터를 모으고 DB를 새로 팠다. Django랑 MySQL 지식을 많이 까먹어서 좀 헤멨지만 생각보다 빨리 감을 잡아서 업데이트 후 일단 배포까지 마무리했다. 역시 서비스는 유저가 있어야 그 의미가 생기고, 개발자는 동기부여를 얻는다. 앞으로 여러 부가기능 추가를 포함해서 유지보수를 꾸준히 해야겠다. 캠프 케이시 시간표도 추가할 예정이다.</p><p>부스트코스 코칭스터디 9기 &lt;인공지능 기초 다지기&gt; 프로그램에 리드부스터로 참여하는 중이다. 강의를 들을 시간이 많지 않기도 하고, 지금까지는 알고 있던 내용이라 대충 넘기고 있는데 앞으로 남은 강의는 챙기면서 본격 딥러닝 복습을 시작해봐야겠다.</p><h2 id="읽은-책들"><a href="#읽은-책들" class="headerlink" title="읽은 책들"></a>읽은 책들</h2><ul><li><strong>&lt;위험한 숫자들 The Number Bias&gt;</strong>, 사너 블라우 (진중문고)</li></ul><p><del>책을.. 많이 .. 읽자.. 제발..</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2월 회고를 일주일이나 지나서 쓰는… 귀찮음 + 바쁨을 핑계로 대겠다.&lt;/p&gt;
&lt;p&gt;2023년의 첫 한 달은 넘치는 포데이 덕분에 부대에서 일한 시간보다 밖에서 코딩한 시간이 더 많았던 것 같다. 매일 알차게 살긴 했는데, 국방부 시계가 멈춘다는</summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>[React Native] React Native 프로젝트 생성시 Ruby 버전 오류와 해결</title>
    <link href="https://oxcarxierra.github.io/Development/react-native-init-ruby-version-error/"/>
    <id>https://oxcarxierra.github.io/Development/react-native-init-ruby-version-error/</id>
    <published>2023-01-29T15:37:13.000Z</published>
    <updated>2023-01-29T15:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="React-Native-프로젝트-생성시-발생한-에러"><a href="#React-Native-프로젝트-생성시-발생한-에러" class="headerlink" title="React Native 프로젝트 생성시 발생한 에러"></a>React Native 프로젝트 생성시 발생한 에러</h2><p>오랜만에 설레는 마음으로 터미널을 켜고 React Native 프로젝트를 생성하는 순간</p><br /><div class="figure center fig-100" style="width:;"><a class="fancybox" href="https://i.imgur.com/XzgKlos.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/XzgKlos.png" alt=""></a></div><div style="clear:both;"></div><p><code>Installing Bundler</code>단계에서 펑!하고 터져버렸다. <del>머선129</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ignoring digest-crc-0.6.3 because its extensions are not built. Try: gem pristine digest-crc --version 0.6.3</span><br><span class="line">Ignoring unf_ext-crc-0.0.7.7 because its extensions are not built. Try: gem pristine unf_ext --version 0.0.7.7</span><br><span class="line"></span><br><span class="line">Error: Looks like your iOS environment is not properly set. ~~</span><br></pre></td></tr></table></figure><p>Try해보라는 커맨드를 입력해봤지만 같은 에러가 뜨기는 마찬가지였다. 약간의 구글링과 삽질을 통해 ruby 버전의 문제임을 알았다. 내 mac에 설치된 Ruby의 버전이 낮아서, 업데이트하니 말끔히 해결되었다.</p><h2 id="Ruby-버전-업데이트"><a href="#Ruby-버전-업데이트" class="headerlink" title="Ruby 버전 업데이트"></a>Ruby 버전 업데이트</h2><p>현재 작업중인 폴더에 설치된 Ruby의 버전은 아래 커맨드로 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby --version</span><br></pre></td></tr></table></figure><p>Ruby의 버전을 선택해서 설치하거나 업그레이드하려면, Ruby 버전 관리 툴인 <code>rbenv</code>를 설치해야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line">$ brew install rbenv</span><br></pre></td></tr></table></figure><p>이후 React Native에서 요구하는 버전으로 Ruby를 새로 설치하자. 필요한 Ruby의 버전은 <a href="https://github.com/facebook/react-native/blob/main/.ruby-version">여기</a>에서 확인할 수 있다. 글을 작성하는 시점에는 2.7.6으로 되어있었다. 참고로 상위 버전의 Ruby를 설치했을 때에도 오류가 나서, 정확히 일치하는 버전을 설치해야 하는 것 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rbenv install 2.7.6</span><br></pre></td></tr></table></figure><p>이후 아래 커맨드를 통해 rbenv에 설치된 Ruby를 사용하도록 설정해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rbenv global 2.7.6</span><br><span class="line"></span><br><span class="line">$ ruby --version</span><br><span class="line">* 2.7.6</span><br></pre></td></tr></table></figure><p>만약 <code>rbenv global</code> 커맨드 이후에도 <code>ruby --version</code>이 바뀌지 않는다면, 환경변수 설정이 필요하다. <code>eval &quot;$(rbenv init - zsh)&quot;</code>를 <code>~/.zshrc</code>파일에 추가해주면, Ruby 버전이 정상적으로 반영된 것을 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막줄에 eval &quot;$(rbenv init - zsh)&quot; 추가</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line">$ ruby --version</span><br><span class="line">* 2.7.6</span><br></pre></td></tr></table></figure><p>이제 다시 설레는 마음으로 새로운 프로젝트를 시작해보자!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx react-native init myProject --template react-native-template-typescript</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;h2 id=&quot;React-Native-프로젝트-생성시-발생한-에러&quot;&gt;&lt;a href=&quot;#React-Native-프로젝트-생성시-발생한-에러&quot; class=&quot;headerlink&quot; title=&quot;React Native 프로젝트 </summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>[국방 AI 부문 MINI 경진대회] 공정 프로세스 최종 품질값 예측 대회 참가 후기</title>
    <link href="https://oxcarxierra.github.io/ML/multi-stage-continuous-flow-manufacturing-process-competition/"/>
    <id>https://oxcarxierra.github.io/ML/multi-stage-continuous-flow-manufacturing-process-competition/</id>
    <published>2023-01-02T11:36:15.000Z</published>
    <updated>2023-01-02T11:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><br><div class="figure " style="width:;"><a class="fancybox" href="https://i.imgur.com/Ua5sYEA.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/Ua5sYEA.png" alt=""></a></div><p>Elice 장병 역량강화 플랫폼에서 12&#x2F;24 ~ 27 4일간 진행된 <a href="https://military22.elice.io/courses/33714/info">[국방 AI 부문 MINI 경진대회] 공정 프로세스 최종 품질값 예측 대회</a>에 참여해서, 7등으로 장려상을 수상하게 되었다.</p><br><div class="figure fig-50" style="width:;"><a class="fancybox" href="https://i.imgur.com/fzv4vA3.jpg" title="갤럭시 버즈2 게또!" data-caption="갤럭시 버즈2 게또!" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/fzv4vA3.jpg" alt="갤럭시 버즈2 게또!"></a><span class="caption">갤럭시 버즈2 게또!</span></div><div style="clear:both;"></div><hr><h1 id="대회-개요"><a href="#대회-개요" class="headerlink" title="대회 개요"></a>대회 개요</h1><p>이 대회는 여러 단계가 있는 연속 생산 공정에서 특정 단계의 품질값을 예측하는 것이 목표다. 공정은 두 개의 Stage로 분리되며, Stage 1과 Stage 2의 작동 방식은 각각 아래와 같다.<br><br></p><ol><li>Stage 1</li></ol><ul><li>Machine 1, 2, 3은 병렬적으로 작업하며, 각 기계의 Output들은 Combiner로 전달된다.</li><li>Combiner의 output은 15개의 특정 위치에서 품질값이 측정된다.</li></ul><ol start="2"><li>Stage 2</li></ol><ul><li>Stage 1의 Output은 Machine 4, 5를 직렬적으로 통과한다.</li><li>Machine 5의 Output 또한 15개의 특정 위치에서 품질값이 측정된다.</li></ul><p>시간(time_stamp)에 따른 Machine 1 ~ 5의 상태 데이터와 Stage 1, 2 output의 품질값이 데이터로 주어지며, 대회의 목표는 주어진 시간과 상태 데이터를 통해 30개의 품질값을 예측하는 것이었다. 각 스테이지에서 모델을 하나씩 사용하도록 하고, 각각의 예측값과 실제값의 <strong>R2</strong>를 계산하여 두 값을 평균낸 100점 만점의 성적으로 채점이 이루어졌다.</p><hr><h1 id="코드-리뷰"><a href="#코드-리뷰" class="headerlink" title="코드 리뷰"></a>코드 리뷰</h1><h2 id="데이터-분석-및-전처리"><a href="#데이터-분석-및-전처리" class="headerlink" title="데이터 분석 및 전처리"></a>데이터 분석 및 전처리</h2><p>이번 데이터는 feature의 의미를 알려주지 않아서, 다른 대회와 다르게 어떤 feature를 남겨야 할지 감을 잡기가 불가능했다. 그래서 지시사항에서 삭제하라고 했던 feature만 제거하고 Stage 1, Stage 2의 데이터를 독립적으로 분리시켜 사용하기로 했다.</p><p>또한 시간대별로 데이터가 있어서 시계열로 볼 수도 있겠으나, test data 시간대가 train data 시간대의 과거&#x2F;미래가 아니라, train data 시간대 중간중간의 빈칸이었기 때문에 시계열로 풀지 않았다. 차라리 <code>time_stamp</code>에서 연, 월, 일을 버리고 시, 분, 초만 추출해서 <code>hour</code>, <code>min</code>, <code>sec</code> 세 개의 feature들로 분리했다.</p><figure class="highlight python"><figcaption><span>시간 데이터 분리</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">&#x27;hour&#x27;</span>] = train_data[<span class="string">&#x27;time_stamp&#x27;</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(start=<span class="number">11</span>, stop=<span class="number">13</span>)</span><br><span class="line">train_data[<span class="string">&#x27;min&#x27;</span>] = train_data[<span class="string">&#x27;time_stamp&#x27;</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(start=<span class="number">14</span>, stop=<span class="number">16</span>)</span><br><span class="line">train_data[<span class="string">&#x27;sec&#x27;</span>] = train_data[<span class="string">&#x27;time_stamp&#x27;</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(start=<span class="number">17</span>, stop=<span class="number">19</span>)</span><br><span class="line">train_data = train_data.drop(columns=[<span class="string">&#x27;time_stamp&#x27;</span>])</span><br></pre></td></tr></table></figure><div class="figure " style="width:;"><a class="fancybox" href="https://i.imgur.com/WqQ8Q0L.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/WqQ8Q0L.png" alt=""></a></div><figure class="highlight py"><figcaption><span>Stage 1, 2 데이터 분리</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stage1_data = train_data[train_data.columns.drop(<span class="built_in">list</span>(train_data.<span class="built_in">filter</span>(regex=<span class="string">&#x27;Machine4|Machine5|Stage2&#x27;</span>)))]</span><br><span class="line">stage2_data = train_data[train_data.columns.drop(<span class="built_in">list</span>(train_data.<span class="built_in">filter</span>(regex=<span class="string">&#x27;Machine1|Machine2|Machine3|Stage1&#x27;</span>)))]</span><br></pre></td></tr></table></figure><h2 id="모델-학습"><a href="#모델-학습" class="headerlink" title="모델 학습"></a>모델 학습</h2><p>사실 AI&#x2F;ML 대회는 처음이고 예전에 Kaggle 강의 찍먹해본게 다여서, 딱 하나 사용해봤던 <code>RandomForestRegressor</code>를 이번에도 가장 처음으로 시도해볼 수 밖에 없었다.</p><figure class="highlight py"><figcaption><span>RandomForestRegressor를 이용한 Stage 1 모델</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"></span><br><span class="line">model1 = RandomForestRegressor(n_estimators=<span class="number">600</span>,</span><br><span class="line">                              n_jobs=-<span class="number">1</span>,</span><br><span class="line">                              random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">model1.fit(stage1_train_X, stage1_train_y)</span><br><span class="line"></span><br><span class="line">stage1_predictions = model1.predict(stage1_test_X)</span><br></pre></td></tr></table></figure><p>기대도 안했는데, 첫 점수가 72점이 나오면서 당시 순위로 3등에 올라가는 변수가 생겨버렸다. 뭔가 더 시도해보면 충분히 점수를 더 올릴 수 있을 것 같아서 model1의 output data를 model2의 input feature로 사용해보기도 했는데, 오히려 정확도가 감소한 결과를 얻었다.</p><p>이후에 점수가 더 이상 올라가지 않는 한계에 부딫히자 <code>ExtraTreesRegressor</code> 모델을 시도해보았다.<br>엑스트라 트리 또한 <code>scikit-learn</code>에서 제공하며, 각 트리를 무작위 특성으로 분할하는 식으로 무작위성을 증가시킨 모델이다.</p><figure class="highlight py"><figcaption><span>ExtraTreesRegressor를 이용한 Stage 2 모델</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesRegressor</span><br><span class="line"></span><br><span class="line">model2 = ExtraTreesRegressor(</span><br><span class="line">  n_jobs=-<span class="number">1</span>,</span><br><span class="line">  random_state=<span class="number">0</span>,</span><br><span class="line">  max_features=<span class="string">&#x27;sqrt&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Stage 1 model은 <code>RandomForestRegressor</code>, Stage 2 model은 <code>ExtraTreesRegressor</code>를 이용했을 때 가장 결과가 좋았다.<br>이후 GridSearchCV를 이용하여 각 모델의 최적의 파라미터를 탐색했다.</p><figure class="highlight py"><figcaption><span>GridSearchCV를 이용한 하이퍼파라미터 튜닝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">grid = &#123;</span><br><span class="line">  <span class="string">&#x27;n_estimators&#x27;</span> : [<span class="number">600</span>,<span class="number">800</span>,<span class="number">1000</span>],</span><br><span class="line">  <span class="string">&#x27;max_depth&#x27;</span> : [<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,],</span><br><span class="line">  <span class="string">&#x27;min_samples_leaf&#x27;</span> : [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],</span><br><span class="line">  <span class="string">&#x27;min_samples_split&#x27;</span> : [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model2_grid = GridSearchCV(model2, param_grid = grid, scoring=<span class="string">&quot;r2&quot;</span>, n_jobs=-<span class="number">1</span>, verbose =<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model2_grid.fit(stage2_train_X, stage2_train_y)</span><br><span class="line"></span><br><span class="line">model2_grid.best_params_</span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>최적의 hyperparameter로 구성한 Stage 2 모델로 예측값 도출</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">best_model2 = ExtraTreesRegressor(</span><br><span class="line">  n_estimators=<span class="number">750</span>,</span><br><span class="line">  n_jobs=-<span class="number">1</span>,</span><br><span class="line">  random_state=<span class="number">0</span>,</span><br><span class="line">  max_depth=<span class="number">40</span>,</span><br><span class="line">  min_samples_split=<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">best_model2.fit(stage2_train_X, stage2_train_y)</span><br><span class="line"></span><br><span class="line">stage2_predictions = best_model2.predict(stage2_test_X)</span><br></pre></td></tr></table></figure><p>최종 결과는 <strong>79.3932</strong>점이었는데, 1등 82.3점과 고작 3점 차이어서 1등의 코드가 더욱 궁금해진다. 그래도 첫 대회치고 정말 운 좋게 좋은 결과를 얻은 것 같아서 아주 만족스러웠다.</p><h2 id="Extra-Trees-Model"><a href="#Extra-Trees-Model" class="headerlink" title="Extra Trees Model"></a>Extra Trees Model</h2><p><strong>Random Forest Model</strong>과 그 변종인 <strong>Extra Trees Model</strong>을 이번 기회에 다시 공부해볼 수 있었다.</p><p>두 모델은 기본적으로 <strong>결정트리</strong>Decision Tree 기반이지만, 트리를 생성할 feature을 고르는 방식에서 차이점이 있다. 랜덤 포레스트는 트리 하나를 생성할 때 모든 feature에서 임의로 몇 개를 선택하고 그 중 정보획득량을 기준으로 분할을 생성한다. 그러나 고려해야 할 feature의 개수가 많아지면 최적의 분할을 찾는 데 시간을 많이 소모한다.</p><p>엑스트라트리는 여기서 분할하는 feature을 무작위로 나누어서, 트리를 훨씬 빠르게 구성한다. 만약 하나의 결정 트리에서 이렇게 한다면 성능이 낮아지겠지만, 빨라진 계산 속도를 바탕으로 더 많은 트리를 앙상블 하기 때문에 Overfitting을 막고 검증 세트의 점수를 높이는 효과가 있다.</p><p>두 모델의 하이퍼파라미터는 거의 동일한데, <code>ExtraTreesRegressor</code>의 주요 하이퍼파라미터는 다음과 같다.</p><br><ul><li><code>n_estimators</code> (default &#x3D; 100) : 엑스트라 트리 안의 결정 트리 갯수<br>결정 트리가 많을수록 더 깔끔한 Decision Boundary가 나오므로 n_estimators는 클수록 좋으나, 과해지면 overfitting의 우려가 있으며 메모리와 훈련 시간이 증가한다.</li><li><code>max_depth</code> : 트리의 최대 깊이</li><li><code>min_samples_split</code> (default &#x3D; 2) : 노드를 분할하기 위한 최소한의 샘플 데이터 수</li><li><code>min_samples_leaf</code> (default &#x3D; 1) : 리프노드가 되기 위한 최소한의 샘플 데이터 수</li><li><code>max_features</code>: 무작위로 선택할 Feature의 개수<br><code>sqrt</code>이면 <code>max_features = sqrt(n_features)</code><br><code>log2</code>이면 <code>max_features = log2(n_features)</code><br><code>default</code>값은 <code>max_features = n_features</code> - feature 모두에서 비복원 추출로 선택해 결정 트리를 만든다.<br>max_features 값이 크면 랜덤 포레스트의 트리들이 매우 비슷해지고, 가장 두드러진 특성에 맞게 예측을 할 것이다.<br>max_features 값이 작으면 랜덤 포레스트의 트리들이 서로 상이해져 Overfitting이 줄어들 것이다다.</li></ul><blockquote><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html">sklearn.ensemble.ExtraTreesRegressor Official Docs</a></p></blockquote><hr><h1 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h1><p>실제 제출했던 코드로 리뷰를 했다면 더 좋았겠지만, 대회 종료 후 컨테이너에 접근이 막혀서 기억에 의존해서 복기하며 리뷰를 했던게 아쉽다. ML 전문가 친구가 추천해준 LightGBM도 사용해보고 싶었으나, 파이썬 역량과 제출 기한의 문제로 다음에 사용해보기로 했다.</p><blockquote><p>본 자료는 SSDC-KATUSA ML&#x2F;DL팀 Weekly Scrum 자료로 사용되었습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;
&lt;!-- toc --&gt;

&lt;br&gt;
&lt;div class=&quot;figure &quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;https://i.imgur.com/Ua5sYEA.png&quot; title=&quot;&quot;</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://oxcarxierra.github.io/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>2022년 12월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2022/december-2022-review/"/>
    <id>https://oxcarxierra.github.io/Review/2022/december-2022-review/</id>
    <published>2022-12-31T01:24:08.000Z</published>
    <updated>2022-12-31T01:24:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>2022년의 마지막 한 달, 그리고 내일이면 전역의 해 2023년이 온다.</p><p>크리스마스 주간에 Elice에서 AI MINI 경진대회를 진행하길래, 참여에 의미를 두려고 시작했는데 결국 7등까지 올라가버렸다. 예전에 Kaggle 자전거 수요 예측 실습에서 사용했던 RandomForestRegressor를 그대로 사용했더니 예상치 못하게 높은 점수가 한 번에 떠준 덕분이었다. 거기다가 약간의 하이퍼파라미터 튜닝을 통해서 결과값을 2.0정도 높일 수 있었다.<br>솔직히 운이 좋았던 것도 있지만, 초보적인 모델을 사용하거나 사용하는 모델에 대한 완벽한 이해가 선행되지 않아도 ML 대회에서 나름 고득점이 가능하겠다는 자신감을 얻은 좋은 경험이었던 것 같다. Dacon, Kaggle 찍먹을 (드디어) 본격적으로 시작할수 있으려나?</p><p>MVP로써 구상한 크롬 익스텐션 하나를 Chrome Web Store에 배포했다. 항상 누군가 만든 프레임워크(특히 React)만 사용하다가, 브라우저와 직접적으로 통신해야 하는 익스텐션을 javascript로 개발하니 생각만큼 쉬운 일은 아니었다. 이제 유저층 확보하고 시장의 반응을 살펴봐야 하는데, 우리 팀의 노력만큼 사람들이 관심을 가져주지 않을까봐 걱정이다.</p><p>&lt;아이디어 불패의 법칙&gt;에서는 아이템을 보는 시각을 냉정하게 유지하라고 말한다. 머릿속의 “생각랜드”에서는 그 어떤 아이디어도 “시장 불패의 법칙”을 뚫고 성공할 수 있을 것처럼 보이기 때문이다. 수 많은 “안 될 놈”들 중 “될 놈”을 구분해내는 건 내가 직접 조사해서 수집한 시장의 “데이터” 뿐이다.</p><p>그놈의 연말이 뭔지 자꾸 사람을 무기력하게 만든다… 운동도 꾸준히 못하고, 매주 한 주차씩 들으려던 Coursera DeepLearning Specialization 코스도 조금씩 밀렸다. 새해 의미부여하는건 더 싫은데, 다음 달부턴 새로운 마음으로 낭비되는 시간을 줄여봐야겠다.</p><h2 id="읽은-책들"><a href="#읽은-책들" class="headerlink" title="읽은 책들"></a>읽은 책들</h2><ul><li><strong>&lt;비전공자도 이해할 수 있는 AI지식&gt;</strong>, 박상길 (진중문고)</li><li><strong>&lt;아이디어 불패의 법칙&gt;</strong>, 알베르트 사보이아</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022년의 마지막 한 달, 그리고 내일이면 전역의 해 2023년이 온다.&lt;/p&gt;
&lt;p&gt;크리스마스 주간에 Elice에서 AI MINI 경진대회를 진행하길래, 참여에 의미를 두려고 시작했는데 결국 7등까지 올라가버렸다. 예전에 Kaggle 자전거 </summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>2022년 11월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2022/november-2022-review/"/>
    <id>https://oxcarxierra.github.io/Review/2022/november-2022-review/</id>
    <published>2022-11-30T11:37:11.000Z</published>
    <updated>2022-11-30T11:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>OSAM 해커톤에서 <strong>과학기술정보통신부 장관상</strong>을 받으며 잘 마무리했다. 내년 대회에 참여할 다른 사람이 참고할 수 있도록 후기도 작성해보았다.</p><p>Coursera에 올라와 있는 <strong>Deep Learning Specialization Course</strong>에 Financial Aid를 신청하고, 5개의 코스 중 첫 번째인 <strong>Neural Networks and Deep Learning</strong>을 모두 수강했다. 인공 신경망의 구조와 기초적인 수학 이론이 주를 이뤘고, submission 과제를 통해 numpy, pandas 사용법을 복습할 수 있었다.</p><p>시니어 카투사 달고 배럭 이사도 한 이후로 시간 효율성이 급격하게 떨어진 느낌이다. 퇴근을 3-4시에 하니까, 저녁 먹는 시간을 빼고도 밤에 잠드는 12시, 1시까지 시간이 정말 많은데 왜 이렇게 의미 없이 흘러가는지 모르겠다. 과제를 급하다고 생각하지 않다 보니까 목표의식이 많이 떨어지는 것 같고, 새로운 task에 마주하면서 스스로 해결하는게 귀찮아진 것 같다. 운동도 좀 꾸준히 해보고, 어디에서라도 동기부여를 좀 받아와야 할 것 같다.</p><h2 id="읽은-책들"><a href="#읽은-책들" class="headerlink" title="읽은 책들"></a>읽은 책들</h2><ul><li><strong>&lt;부의 추월차선&gt;</strong>, 엠제이 드마코<br>… 읽다 말았다. 뒤로 갈수록 대부분 동어 반복이며 자기모순적인 내용이 많다.</li><li><strong>&lt;경제기사 궁금증 300문 300답&gt;</strong> - 곽해신 (진중문고)</li><li><strong>&lt;존리의 금융문맹 탈출&gt;</strong> - 존리 (진중문고)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OSAM 해커톤에서 &lt;strong&gt;과학기술정보통신부 장관상&lt;/strong&gt;을 받으며 잘 마무리했다. 내년 대회에 참여할 다른 사람이 참고할 수 있도록 후기도 작성해보았다.&lt;/p&gt;
&lt;p&gt;Coursera에 올라와 있는 &lt;strong&gt;Deep Lear</summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>[React] Library not loaded: @rpath/hermes.framework/hermes 에러</title>
    <link href="https://oxcarxierra.github.io/Development/react-build-hermes-error/"/>
    <id>https://oxcarxierra.github.io/Development/react-build-hermes-error/</id>
    <published>2022-11-21T12:29:08.000Z</published>
    <updated>2022-11-21T12:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>React Native 0.70.0 이상으로 업데이트 하면서 새로운 프로젝트 빌드 시에 build success 후 시뮬레이터에서 튕기는 오류를 겪었다. 해결 방법은 아래와 같다.</p><br /><div class="figure center fig-100" style="width:;"><a class="fancybox" href="https://i.imgur.com/zwdiQV5.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/zwdiQV5.png" alt=""></a></div><div style="clear:both;"></div><p>xcode &gt; build phases &gt; Link binary with Libraries 메뉴에 hermes.xcframework 추가</p><br /><div class="figure center fig-100" style="width:;"><a class="fancybox" href="https://i.imgur.com/ksgRFIN.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/ksgRFIN.png" alt=""></a></div><div style="clear:both;"></div><p>xcode &gt; General &gt; Frameworks, Libraries, and Embedded Content 에 hermes.xcframework 추가 후 Embed &amp; Sign</p><blockquote><p><a href="https://github.com/facebook/react-native/issues/34601">Github - Library not loaded: @rpath&#x2F;hermes.framework&#x2F;hermes on iOS #34601</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;p&gt;React Native 0.70.0 이상으로 업데이트 하면서 새로운 프로젝트 빌드 시에 build success 후 시뮬레이터에서 튕기는 오류를 겪었다. 해결 방법은 아래와 같다.&lt;/p&gt;
&lt;br /&gt;

&lt;div c</summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
    <category term="React" scheme="https://oxcarxierra.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>[2022 군장병 공개 SW 온라인 해커톤] 과학기술정보통신부 장관상 수상 후기</title>
    <link href="https://oxcarxierra.github.io/Review/2022/army-hackathon-review/"/>
    <id>https://oxcarxierra.github.io/Review/2022/army-hackathon-review/</id>
    <published>2022-11-14T10:41:15.000Z</published>
    <updated>2022-11-14T10:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><br /><div class="figure center fig-100" style="width:;"><a class="fancybox" href="https://i.imgur.com/65y7cjS.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="https://i.imgur.com/65y7cjS.png" alt=""></a></div><div style="clear:both;"></div><h2 id="해커톤-참가"><a href="#해커톤-참가" class="headerlink" title="해커톤 참가"></a>해커톤 참가</h2><p><a href="https://osam.kr/">국방오픈소스아카데미(OSAM) 홈페이지</a>를 해커톤 이전에 발견을 해서, 2022년 해커톤도 열리기를 기대하고 있던 중에 대회 공고가 올라왔고 자연스럽게 참여하게 되었다.</p><h2 id="참가자-선발-과정"><a href="#참가자-선발-과정" class="headerlink" title="참가자 선발 과정"></a>참가자 선발 과정</h2><p>해커톤에 참여하려면 <strong>온라인 평가</strong>, <strong>코딩 테스트</strong>, <strong>개발 계획서</strong> 이렇게 세 가지의 과제를 제출해야 했고, 각각 성적이 <code>50%</code>,<code>25%</code>,<code>25%</code>씩 반영된 선발 점수로 최종 해커톤 참여자 150명 내외를 선정하는 방식이었다.</p><h3 id="1-온라인-평가"><a href="#1-온라인-평가" class="headerlink" title="1. 온라인 평가"></a>1. 온라인 평가</h3><p>온라인 평가는 각 분야별 필수 강의를 듣고 그 강의에 관련된 시험을 보는 형태였다. 제한시간은 1시간, 총 40문제가 출제되었었다. 선택할 수 있는 분야는 <code>WEB</code>,<code>APP</code>,<code>IoT</code>,<code>Cloud</code> 총 4개가 잇었다. 내가 선택했던 APP 분야는 Dart 언어를 사용하는 Front-end 라이브러리 Flutter를 중점으로 했고, 플러터 초급∙중급∙고급 강좌를 필수적으로 이수해야 했다. 평가는 강의에서 나온 자료가 거의 그대로 나왔던 것 같다. 다만 막상 풀 때는 다 아는 내용이라고 생각했지만 결과를 확인해보니 95점이었다. 두 문제를 어디서 틀렸는지 아직도 모르겠다.<br>(<em>사실 문제를 풀면서 구글링도 가능하기 때문에 1시간을 적당히 잘 분배해서 검색의 기회를 적당히 활용하는것도 좋다고 생각한다.</em>)</p><h3 id="2-코딩-테스트"><a href="#2-코딩-테스트" class="headerlink" title="2. 코딩 테스트"></a>2. 코딩 테스트</h3><p>사실상 이 코딩테스트를 준비하기 위해 알고리즘 공부를 한 달 넘게 했다. <a href="https://programmers.co.kr/">프로그래머스</a>의 코딩테스트 환경으로 2시간 동안 총 4문제를 풀게 되는데, 이쪽으론 비전공자였던 내가 다 풀기에는 조금 어려운 난이도였다. 백준으로 따지면 1번은 <code>실버 4</code>, 2번은 <code>실버 1</code>, 3~4번은 <code>골드 1</code>정도의 난이도였던 것 같다. 사실 그렇게 어려운 알고리즘이 나온 건 아닌데, 문제 자체가 너무 더럽고 생각치 못한 예외 케이스들이 있어서 코드 양이 많이 길어질 수 밖에 없었던 것 같다. 난 결과적으로 1,2번 모두 풀고 3번은 패스, 4번을 절반 정도 점수를 받아서 최종 점수는 400점 만점에 254점이었다. 사실 알고리즘을 이번에 처음 입문을 하고 짧은 시간동안 압축해서 공부를 하자니 이론적인 부분은 많이 배웠어도, 실전 코딩테스트에서 좋은 성적이 나오려면 문제를 많이 풀어보는게 가장 좋은 것 같다.<br>참고로, 해커톤과 별개인 <strong>코딩경진대회</strong>는 이 코딩 테스트의 점수가 가장 높은 6명에게 시상과 상품을 준다. 이번 1등 상품은 iPad Air정도였으니, 부상이 꽤 쏠쏠하다. 다만 상위 3명은 모두 만점이라 해결 시간이 짧았던 순서로 순위가 정해졌고, 6등 커트라인이 322점이었으니 수상하려면 최소 백준 플레티넘 정도는 되야하지 않을까 싶다.</p><h3 id="3-개발-계획서"><a href="#3-개발-계획서" class="headerlink" title="3. 개발 계획서"></a>3. 개발 계획서</h3><p><strong>병영생활 및 국방에서 활용 가능한 창의적인 아이디어</strong>라는 대주제 안에서 본인이 해커톤에 진출했을 때 진행할 프로젝트의 구체적인 개발 계획서를 작성하는 과제였다. 물론 나중에 본인의 주제를 포기하고 다른 사람의 주제에 모여서 팀 빌딩을 할 수 있다는 걸 알고있었어서, 많은 노력을 들이지는 않았다.</p><h3 id="4-선발-결과"><a href="#4-선발-결과" class="headerlink" title="4. 선발 결과"></a>4. 선발 결과</h3><p>생각만큼 대회 경쟁률이 그렇게 빡세지 않아서 코딩테스트 점수가 기대에 못 미쳤던 나도 안정권으로 본선에 진출할 수 있었던 것 같다. 해커톤 참가자로 선발된 이후에는 별도의 탭에서 팀 빌딩 기능과 커뮤니티 게시판을 이용할 수 있게된다. 그래서 다른 참가자들의 개발 계획서도 볼 수 있었는데, 개발계획서가 빈칸인데도 선발된 사람도 있었다. 참가자 수가 그만큼 적어서 개발계획서를 완성하지 못해도 선발했던 것 같은데, 그럼 굳이 코딩테스트 준비나 개발계획서를 열심히 할 필요가 없었을 수도 있겠다는 생각도 들었다.</p><h2 id="팀-빌딩-과정"><a href="#팀-빌딩-과정" class="headerlink" title="팀 빌딩 과정"></a>팀 빌딩 과정</h2><p>팀 빌딩 기간이 시작되면 내 프로젝트에 필요한 구체적인 포지션과 인원수를 설정할 수 있게 된다. 그래서 다른 사람들의 개발 계획서를 보면서 참여하고 싶은 주제가 생기면 본인의 것을 포기하고, 비어있는 포지션에 참여 신청을 넣으면 되는 방식으로 진행된다. 나는 고등학교 동기가 팀장을 맡은 <strong>군 법규 도우미</strong> 프로젝트에 Frontend 파트로 참여하기로 했다. 실제로 육군 규정과 국방부 규정으로 정해진 사항임에도 불구하고 군인들이 잘 몰라서 억울한 일을 당해도 항의나 보상 요구를 하지 못하는 경우가 많다는데 공감했기 때문이다.<br>팀빌딩으로 실력 있는 분들이 들어오셔서 총 7명의 팀이 꾸려졌고, 현업에서 일하시는 능력있는 멘토분도 배정받게 되었다. 그 이후로 우리 팀이 목표한 아이디어를 구현하고 본격적으로 개발할 수 있는 1달이라는 시간이 주어졌다.</p><h2 id="온라인-해커톤-및-프로젝트-진행"><a href="#온라인-해커톤-및-프로젝트-진행" class="headerlink" title="온라인 해커톤 및 프로젝트 진행"></a>온라인 해커톤 및 프로젝트 진행</h2><p>팀원 모두가 현역 병사다 보니 훈련 일정도 있고, 남는 개인정비 시간을 쪼개가며 참여했던 해커톤이라 협업하기가 쉽지만은 않았다. 또, 싸지방 컴퓨터로 온라인 IDE를 사용해야 하는 등 열악한 개발환경의 문제도 있었다. 나도 외박 나가있는 동안은 거의 모든 시간을 개발에 쏟아부었던 것 같다.<br>멘토님으로부터 전해받은 몇 가지 팁을 남겨놓자면,</p><ol><li><strong>최종 평가는 발표자료(프레젠테이션)과 시연영상으로만 진행된다.</strong><br>데모에 자잘한 오류가 있더라도, 시간이 없으면 영상에 드러나지 않을 정도로만 수정하는 것도 좋다. 또한 발표는 멘토가 진행하셨기 때문에, 팀이 전하고자 하는 메세지를 프레젠테이션에 최대한 많이 담아야 한다.</li><li><strong>병사 개개인을 타겟으로 한 주제보다, 전체적인 ‘군’에 도움을 줄 수 있는 주제가 좋다.</strong><br>이 프로젝트로써 군의 어떤 문제를 긍정적으로 해결할 수 있는지가 강조되어야 한다.</li><li><strong>개발문서 (Github <code>README.md</code> 포함) 를 구체적으로 쓰고, 이미지를 많이 첨부하면 좋다.</strong><br>우리 팀의 경우에는 <code>GitBook</code>도 활용해서, 미처 시연영상에 담지 못한 내용까지 상세히 설명해 두었다.</li></ol><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><ol><li><p>군 생활동안 대회에서 의미있는 상을 하나 정도는 받고 싶었는데, 육군창업경진대회마저 광탈하면서 아쉬웠던 터라 과기부 장관상(1등상)은 믿기 어려울 정도로 뿌듯한 소식이었다. 또 처음으로 참여해본 해커톤 형식의 대회였는데(사실 무박2일, 2박3일로 진행되는 대부분의 해커톤과는 조금 다르지만) 좋게 끝나서 다행이다. Expo, React-Query같은 새로운 기술 스택도 배울 수 있었고, 인사이트를 공유할 좋은 팀원들도 만날 수 있었다. 이런 분들과 협업하면서 완성이라는 하나의 목표를 위해 다 같이 고민하고 해결해나갔던 과정 자체가 참 재미있어서, 대회를 준비하는 한 달 남짓 시간동안 행복했던 것 같다.</p></li><li><p>요즘 군대가 많이 좋아졌다고들 하지만, 아직도 여러 군인이 부대 내 선임 ∙ 상관으로부터의 부조리, 성추행, 괴롭힘으로 정신적 피해를 호소하고 극단적인 선택을 한다. 몇몇 지휘관은 본인의 출세를 위해 덮고 숨기기 급급하며, 수사는 물론 배상조차 제대로 진행되지 못하는 경우가 다반수다. 이런 이슈가 터지고 뉴스를 볼 때마다, 원했던 원하지 않았던 국방의 의무를 다하기 위해 입대한 사람들이 대체 왜 이런 비극을 겪어야 했는지 분노하지 않을 수 없었다. 그리고 모두가 가만히 있으면 아무것도 바뀌지 않기에, 여느 ‘냄비근성’처럼 외면하면서 넘어가고 싶지 않았다. 해커톤에 제출한 하나의 데모 앱에 불과하겠지만, 나는 나만의 방식으로 이 문제를 해결하기 위해 고민했고 노력했다는 사실에 의미를 두고 싶다. 그리고 작은 변화의 바람이라도 함께하는 사람들이 많아지고 군 수뇌부부터 노력한다면, 조준우 일병, 이예람 중사같은 사고가 이제는 다시 일어나지 않을 수 있을 것이다.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;!-- toc --&gt;

&lt;br /&gt;
&lt;div class=&quot;figure center fig-100&quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;https://i.imgur.com/65y7</summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>[React] Axios를 React Hook으로 사용하기</title>
    <link href="https://oxcarxierra.github.io/Development/use_axios_as_react_hook/"/>
    <id>https://oxcarxierra.github.io/Development/use_axios_as_react_hook/</id>
    <published>2022-11-05T13:03:24.000Z</published>
    <updated>2022-11-05T13:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><p>그동안은 axios를 그냥 import해서 사용했는데, 이렇게 <code>useAxios()</code> 커스텀 훅을 만들어서 사용하면 에러 처리나 baseUrl에 대한 전처리를 쉽게 해줄 수 있다.</p><figure class="highlight ts"><figcaption><span>useAxios.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> extra <span class="keyword">from</span> <span class="string">&quot;@utils/extra&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosError</span> &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAtomValue &#125; <span class="keyword">from</span> <span class="string">&quot;jotai&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useAxios</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useAtomValue</span>(userAtom);</span><br><span class="line">  <span class="keyword">const</span> axiosInstance = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: yourBackendBaseURL,</span><br><span class="line">    &#125;); <span class="comment">// Axios Instance 생성</span></span><br><span class="line">    instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">async</span> (config) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="keyword">await</span> yourToken; <span class="comment">// header에 들어갈 token 받아오기</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...config,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          ...(config.<span class="property">headers</span> ?? &#123;&#125;),</span><br><span class="line">          <span class="title class_">Authorization</span>: token,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="literal">undefined</span>, <span class="keyword">async</span> (value) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">AxiosError</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(</span><br><span class="line">          <span class="string">`AxiosError(<span class="subst">$&#123;value.response?.status&#125;</span>/<span class="subst">$&#123;value.code&#125;</span>): <span class="subst">$&#123;value.message&#125;</span>\n<span class="subst">$&#123;value.response?.data&#125;</span>`</span></span><br><span class="line">        ); <span class="comment">// 에러 출력</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">response</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;, [user]);</span><br><span class="line">  <span class="keyword">return</span> axiosInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useAxios;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;useAxios()&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
    <category term="React" scheme="https://oxcarxierra.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>2022년 10월 회고</title>
    <link href="https://oxcarxierra.github.io/Review/2022/october-2022-review/"/>
    <id>https://oxcarxierra.github.io/Review/2022/october-2022-review/</id>
    <published>2022-11-03T07:18:39.000Z</published>
    <updated>2022-11-03T07:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>육군창업경진대회는 본선 탈락했다. 나름 열심히 준비해서 본선은 갈 줄 알았는데, 아쉬움이 좀 남는다. 아이템이 대회의 컨셉과 안맞는 부분도 있었던 것 같고, 처음으로 준비해 본 창업 경진대회라서 노하우가 부족했던 것 같다.</p><p>10월 한 달 내내 국방 해커톤 프로젝트에 집중한 결과 데모 앱을 기획대로 다 개발했고, 출품까지 잘 마무리했다. 팀원이 7명으로 꽤 많은 데다 다들 역량이 뛰어나셔서, 처음에 불가능해 보일 정도로 많았던 태스크를 모두 끝낼 수 있었던 것 같았다. 그치만 그만큼 협업에서의 어려움이 조금 느껴졌다. 아무래도 다들 열악한 환경에서 개인정비 시간 쪼개가며 참여하는 프로젝트이다 보니까 소통이나 진행 순서에서 꼬이는게 좀 있었다.<br>별개로, 우리 팀의 프로젝트가 군 내 인명피해와 사건사고를 막기 위한 솔루션이라는 점에서 큰 의미가 있었던 것 같다. 종종 군인이 자살했다는 뉴스를 들으면 안타까웠었는데, 그저 연민으로 끝내지 않고 내가 할 수 있는 방법으로 행동에 옮겼다는 뿌듯함이 남았다. 수상까지 하면 완벽할 것 같다.</p><p>책은 많이 못 읽었다. &lt;데미안&gt;이랑 경제 관련 책을 읽는 중인데, 11월에 다 읽어야겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;p&gt;육군창업경진대회는 본선 탈락했다. 나름 열심히 준비해서 본선은 갈 줄 알았는데, 아쉬움이 좀 남는다. 아이템이 대회의 컨셉과 안맞는 부분도 있었던 것 같고, 처음으로 준비해 본 창업 경진대회라서 노하우가 부족했던 </summary>
      
    
    
    
    <category term="Review" scheme="https://oxcarxierra.github.io/categories/Review/"/>
    
    
    <category term="retrospective" scheme="https://oxcarxierra.github.io/tags/retrospective/"/>
    
  </entry>
  
  <entry>
    <title>[React] Luxon.js 라이브러리로 날짜/시간 포맷팅하기</title>
    <link href="https://oxcarxierra.github.io/Development/using-luxon-js/"/>
    <id>https://oxcarxierra.github.io/Development/using-luxon-js/</id>
    <published>2022-10-23T14:35:03.000Z</published>
    <updated>2022-10-23T14:35:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>Backend에서 시간에 대한 정보가 담긴 데이터를 보내주는 유형은 다양하다. 일반적으로 js, ts에 존재하는 <code>Date</code> type으로 오거나, 한 번 처리해서 <code>202310232335</code>처럼 <code>string</code> type으로 오기도 한다. 또는 <code>10343904</code>같은 <code>number</code> type으로 오기도 하는데, 이 경우는 <code>1970.01.01 00:00:00 UTC</code>를 기준으로 지난 시간을 millisec의 단위로 표시한 것이다. (참고: <a href="https://currentmillis.com/">여기</a>에서는 현재 시간을 millisec 단위로 알려준다.)</p><p>Frontend 단에서 이 데이터를 <code>OOOO년 OO월 OO일 OO:OO</code> 같은 형식으로 바꿔줄 때, 지금까지는 <code>Date.getDate()</code>같은 함수를 이용해서 새로운 함수를 정의해서 썼었다. 그러나 luxon.js의 <code>DateTime</code>을 이용하면 포맷팅을 아주 쉽게 할 수 있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DateTime</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DateTime</span>.<span class="title function_">fromMillis</span>(time * <span class="number">1000</span>).<span class="title function_">toFormat</span>(<span class="string">&#x27;yyyy.MM.dd  hh:mm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `toFormat()`함수를 이용해 내가 원하는 string 형식으로 변환할 수 있다.</span></span><br></pre></td></tr></table></figure><p>아래 공식문서를 참고해보면 이 외에도 유용한 기능이 많다.</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul><li><a href="https://www.npmjs.com/package/luxon">npmjs</a></li><li><a href="https://moment.github.io/luxon/api-docs/index.html">Github Docs</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;p&gt;Backend에서 시간에 대한 정보가 담긴 데이터를 보내주는 유형은 다양하다. 일반적으로 js, ts에 존재하는 &lt;code&gt;Date&lt;/code&gt; type으로 오거나, 한 번 처리해서 &lt;code&gt;20231023233</summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
    <category term="React" scheme="https://oxcarxierra.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Dart 기초 문법</title>
    <link href="https://oxcarxierra.github.io/Development/basics-of-dart/"/>
    <id>https://oxcarxierra.github.io/Development/basics-of-dart/</id>
    <published>2022-10-07T13:13:45.000Z</published>
    <updated>2022-10-07T13:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="변수형"><a href="#변수형" class="headerlink" title="변수형"></a>변수형</h2><ul><li><p>정수형 Number</p></li><li><p>문자열 String<br>문자열 내 변수 value - ‘$value’</p></li><li><p>불리안 bool</p></li><li><p>true, false (소문자임에 주의!)</p></li><li><p>타입 미지정 var, dynamic</p></li></ul><p>dynamic 타입으로 선언되면 할당되는 변수에 따라 타입이 바뀐다.</p><h2 id="리스트-List-lt-type-gt"><a href="#리스트-List-lt-type-gt" class="headerlink" title="리스트 List &lt;type&gt;"></a>리스트 List &lt;type&gt;</h2><ul><li>growable list : 길이가 무한히 늘어날 수 있다.</li><li>ungrowable list의 선언 :<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = <span class="keyword">new</span> <span class="built_in">List</span>(n);</span><br><span class="line"><span class="built_in">List</span> list_2 = <span class="keyword">new</span> <span class="built_in">List</span>.from([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li>길이는 list.length</li></ul><h2 id="Map-해쉬"><a href="#Map-해쉬" class="headerlink" title="Map 해쉬"></a>Map 해쉬</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, type&gt; dictionary = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">dictionary.keys.toList()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>final, const - 한 번만 선언하도록 설정, 차이점은 const는 compile time에 할당이 되어있어야 하고, final은 runtime에 지정</li><li>Enum - 커스텀 변수형</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status = &#123;approved, rejected, pending&#125;</span><br></pre></td></tr></table></figure><ul><li>typedef 함수를 변수처럼 사용가능하게 함.</li></ul><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><p>??&#x3D; : null인 경우 할당</p><p>&#x2F; 계산하면 double형으로 할당</p><p>is <type> , !is <type></p><h2 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h2><p>class변수는 instance라고 부른다.</p><p>constructor의 이름은 변수이름과 같다.</p><ul><li><p>Constructor의 선언</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">String</span> id;</span><br><span class="line"></span><br><span class="line">    ClassName(&#123;</span><br><span class="line">        <span class="built_in">String</span> name, <span class="built_in">String</span> id,</span><br><span class="line">    &#125;) : <span class="keyword">this</span>.name = name, <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Named Constructor</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//선언방법</span></span><br><span class="line">ClassName.constructorName() :</span><br></pre></td></tr></table></figure></li><li><p>class의 Getter와 setter<br>class 내에서 선언하는 변수들은 _name 언더스코어로 시작. private variable이라고 부른다.<br>private variable은 외부에서 접근 불가. 그래서 getter, setter을 선언해준다</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Idol</span></span>&#123;</span><br><span class="line">    <span class="built_in">String</span> _name;</span><br><span class="line">    <span class="built_in">String</span> _group;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> name&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> name(<span class="built_in">String</span> newname)&#123;</span><br><span class="line">        <span class="keyword">this</span>._name = newname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="클래스의-상속"><a href="#클래스의-상속" class="headerlink" title="클래스의 상속"></a>클래스의 상속</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">    ChildClass(</span><br><span class="line"></span><br><span class="line">    ): <span class="keyword">super</span>( <span class="comment">// super은 부모클래스의 인스턴스를 지칭.</span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부모 클래스의 인스턴스, 메소드 모두를 상속받음. 부모는 자식의 인스턴스와 자식을 상속받지 않음.</p><p>부모 클래스는 두개 이상이 될 수 없다. 하나의 클래스의 자식 클래스는 여러개가 될 수 있다.</p><h3 id="메소드-오버라이딩"><a href="#메소드-오버라이딩" class="headerlink" title="메소드 오버라이딩"></a>메소드 오버라이딩</h3><p>자식클래스에서 메소드를 다시 작성</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> <span class="comment">// decorator</span></span><br><span class="line"><span class="comment">//이름은 같으면서 새로 쓴 메소드</span></span><br></pre></td></tr></table></figure><h3 id="static-키워드"><a href="#static-키워드" class="headerlink" title="static 키워드"></a>static 키워드</h3><p>하나의 클래스 내에 공유되는 변수가 있다면 <code>static</code>으로 선언해준다.</p><h3 id="Interface-키워드"><a href="#Interface-키워드" class="headerlink" title="Interface 키워드"></a>Interface 키워드</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdolInterface</span></span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">void</span> sayName()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoyGroup</span> <span class="keyword">implements</span> <span class="title">IdolInterface</span></span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">void</span> sayName()&#123;</span><br><span class="line">        <span class="comment">//something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스의 형식을 지정해주는 인터페이스</p><h3 id="Cascade-Operator"><a href="#Cascade-Operator" class="headerlink" title="Cascade Operator"></a>Cascade Operator</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Idol</span></span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">String</span> group;</span><br><span class="line">    <span class="keyword">void</span> sayName()&#123;&#125;;</span><br><span class="line">    <span class="keyword">void</span> sayGroup()&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Idol idol = <span class="keyword">new</span> Idol(<span class="string">&#x27;이름&#x27;</span>,<span class="string">&#x27;그룹&#x27;</span>);</span><br><span class="line">idol.sayName();</span><br><span class="line">idol.sayGroup();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Idol(<span class="string">&#x27;이름&#x27;</span>,<span class="string">&#x27;그룹&#x27;</span>)</span><br><span class="line">    ..sayname()</span><br><span class="line">    ..sayGroup();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- excerpt --&gt;

&lt;!-- toc --&gt;

&lt;h2 id=&quot;변수형&quot;&gt;&lt;a href=&quot;#변수형&quot; class=&quot;headerlink&quot; title=&quot;변수형&quot;&gt;&lt;/a&gt;변수형&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;정수형 Number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Development" scheme="https://oxcarxierra.github.io/categories/Development/"/>
    
    
  </entry>
  
</feed>
